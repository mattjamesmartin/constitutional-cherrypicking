#!/bin/python
# -*- coding: utf-8 -*-

"""

Data processing populates model folders with:

- encoded_segments.json: List of IDs of segments that have been encoded.
- segments_dict.json: Serialised Python dictionary containing segment text and metadata. Keys are segment IDs. 
- segment_encodings.json: List of segment encoding vectors generated by the encoder. Order of vectors is order of encoded segments.

If the source data is document-based then the following file is also generated:

- document_dict.json: Serialised Python dictionary containing document metadata with document ID as the key.

"""

import os
os.environ['KMP_DUPLICATE_LIB_OK']='True'

from packages import *
from nlp import *

import process_csv
import process_xlsx_segmenting

def main(config,nlp_config):

    # Segmentation
    nlp = spacy.load(nlp_config['spacy']['spacy_path'] + nlp_config['spacy']['model'])   
    nlp.max_length = 3000000

    # Encoder
    encoder = hub.load(nlp_config['encoder']['encoder_path'] + nlp_config['encoder']['model'])

    for config_name,config_values in config.items():
        if config_values['run'] == True:
            print()
            print(config_name)
            config_values['function'].process(config_values,encoder,nlp)

if __name__ == '__main__':

    # Locations of NLP models
    nlp_config = {}
    nlp_config['spacy'] = {}
    nlp_config['spacy']['spacy_path'] = '../'
    nlp_config['spacy']['model'] = 'es_core_news_lg-3.7.0'

    nlp_config['encoder'] = {}
    nlp_config['encoder']['encoder_path'] = '../'
    nlp_config['encoder']['model'] = 'use_ml_3'

    # Data processing configurations
    config = {}
  
    config['cuba'] = {} 
    config['cuba']['run'] = True
    config['cuba']['function'] = process_xlsx_segmenting
    config['cuba']['model_path'] = '../model/'
    config['cuba']['data_path'] = '../data/Cuba/Post-consultation debates/'
    config['cuba']['metadata'] = {
        'seat': 'seat',
        'full_name': 'full_name',
        'municipality': 'municipality',
        'province': 'province',
        'vote_perc':'vote_perc',
        'sex': 'sex',
        'age_feb2018': 'age_feb2018',
        'occupation': 'occupation',
        'educ_level': 'educ_level',
        'PCC':'PCC',
        'CDR':'CDR',
        'CTC':'CTC',
        'FMC':'FMC',
        'ANAP':'ANAP',
        'ACRC':'ACRC',
        'FEU':'FEU',
        'UJC':'UJC',
        'central_committee': 'central_committee',
        'politburo': 'politburo',
        'draft_commission': 'draft_commission'
    }

    config['2021-2022 plenary transcripts'] = {}
    config['2021-2022 plenary transcripts']['run'] = False
    config['2021-2022 plenary transcripts']['function'] = process_xlsx_segmenting
    config['2021-2022 plenary transcripts']['model_path'] = '../model/'
    config['2021-2022 plenary transcripts']['data_path'] = '../data/Chile/Plenary transcripts/'
    config['2021-2022 plenary transcripts']['metadata'] = {
        'ID':'ID',
        'full_name':'full_name',
        'given_names':'given_names',
        'surnames':'surnames',
        'district':'district',
        'region':'region',
        'sex':'sex',
        'age':'age_jul2021',
        'educ_level':'educ_level',
        'occupation':'occupation',
        'elec_list':'elec_list',
        'party':'party',
        'collective':'collective',
        'provisional_comm': 'provisional_commission',
        'thematic_comm':'thematic_commission',
        'misc_comm':'misc_commission',
        'position':'position',
        'ideology1':'ideology1',
        'sd1':'sd1',
        'ideology2':'ideology2',
        'sd2':'sd2',
    }

    main(config,nlp_config)
